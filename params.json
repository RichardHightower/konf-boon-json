{
  "name": "Konf Boon JSON Integration",
  "tagline": "Konf Lib for reading LAX JSON and JSON files.",
  "body": "[Konf Main Website](http://advantageous.github.io/konf/)\r\n\r\n## Config Lib to combine Boon JSON (LAX and normal) with Konf\r\n\r\nThis lib allows you to get type safe config from JSON LAX, and JSON files.\r\n\r\n\r\nLet's look at some examples.\r\n\r\n## Combine BOON JSON with Konf strongly typed config\r\n\r\nThis project allows you to combine Boon JSON parser with Konf.\r\n\r\n#### Combining Boon JSON with Konf\r\n\r\n```java\r\nimport static io.advantageous.konf.boon.BoonConfigLoader.boonConfig;\r\n...\r\n\r\n        final Config config = boonConfig(\"reference.conf\");\r\n        final String abc = config.getString(\"abc\");\r\n        assertEquals(\"abc\", abc);\r\n\r\n```\r\n\r\nNow let's read some strict JSON.\r\n\r\n#### Reading Strict JSON\r\n```java\r\n\r\nimport static io.advantageous.konf.boon.BoonConfigLoader.loadStrictJson;\r\n...\r\n\r\n        final Config config = loadStrictJson(\"test-config.json\");\r\n        final String bar = config.getString(\"bar\");\r\n        assertEquals(\"baz\", bar);\r\n\r\n        final int foo = config.getInt(\"foo\");\r\n        assertEquals(1, foo);\r\n```\r\n\r\nWe can combine JSON Lax with Konf as a fallback (or the other way around).\r\n\r\n#### Combining Boon JSON Lax with Konf Config.\r\n```java\r\n\r\nimport static io.advantageous.config.ConfigLoader.configs;\r\nimport static io.advantageous.config.ConfigLoader.config;\r\n\r\n\r\nConfig config = configs(boonConfig(\"reference.conf\"),  //lax JSON\r\n                        config(\"test-config.js\")); // test-config\r\n\r\n```\r\n\r\n## Lax JSON\r\n\r\nBoon supports strict JSON or lax JSON as in relaxed JSON.\r\nWith relaxed JSON you can single quote keys or use no quote at all.\r\nRelaxed JSON is very similar to Type Safe Config format.\r\n\r\nYou can use `=` instead of `:`.\r\nYou can use all three common forms of comments `#`, `\\*`, and `\\\\`.\r\n\r\nAdd an extra comma, forget a comma, and it still works.\r\n\r\n#### ReLax JSON example\r\n\r\n```javascript\r\n{\r\n  abc : \"abc\",\r\n\r\n  //This allows comments\r\n  myUri: \"http://host:9000/path?foo=bar\",\r\n\r\n  # There are different ways to allow comments\r\n  someKey: {\r\n    nestedKey: 234,\r\n    other: \"this text\"\r\n  },\r\n\r\n  /*\r\n    Are commnents great?\r\n  */\r\n\r\n  int1: 1,\r\n\r\n  //Look no comma\r\n  float1 : 1.0\r\n\r\n  //Look I can use equal instead of colon\r\n  double1 = 1.0\r\n  long1: 1,\r\n  \r\n  //No quote around the string\r\n  string1: rick,\r\n  \r\n  //Don't need to quote strings but you can.\r\n  stringList: [Foo, Bar],\r\n  configInner: {\r\n    int2: 2,\r\n    float2: 2.01\r\n  },\r\n  myClass: \"java.lang.Object\",\r\n  myURI: \"http://localhost:8080/foo\",\r\n  //Maps can have single quotes or double quotes\r\n  employee: {'id': 123, name: \"Geoff\"},\r\n  employees: [\r\n    {id: 123, \"name\": \"Geoff\"},\r\n    {id: 456, \"name\": \"Rick\"},\r\n    {id: 789, 'name': \"Paul\"}\r\n  ],\r\n  //commas are optional\r\n  floats: [1.0, 2.0, 3.0]\r\n  doubles: [1.0, 2.0, 3.0],\r\n  longs: [1.0, 2.0, 3.0],\r\n  ints: [1, 2, 3],\r\n\r\n\r\n  //You can leave off the comma\r\n  diskSpace: \"10gigabytes\"\r\n\r\n  // You can end in a comma makes cutting and pasting easier since you \r\n  // don't have to worry about the trailing comma.\r\n  diskVolumes: ['10 gigabytes', '10GB', '10gigabytes', '10B'],\r\n}\r\n```\r\n\r\nKeep in mind that you do not have to use Lax JSON. \r\nLax JSON is much more terse, and allows comments.\r\n\r\n\r\n## Good parse error messages\r\n\r\nBoon gives good parse error messages, and it will tell you the exact line\r\nof config that has the problem.\r\n\r\nExample\r\n\r\n#### Forgot a comma while doing strict JSON\r\n```javascript\r\n{\r\n  \"foo\" : 1\r\n  \"bar\" : \"baz\"\r\n}\r\n```\r\n\r\n#### Hey you have a problem right on line 3 \r\n```\r\nThe current character read is '\"' with an int value of 34\r\nexpecting '}' or ',' but got current char '\"' with an int value of 34\r\nline number 3\r\nindex number 16\r\n  \"bar\" : \"baz\"\r\n..^\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}